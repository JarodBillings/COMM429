{"version":3,"sources":["logo.svg","ChatWindow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ChatWindow","props","chatStyle","height","width","onMessage","bind","onOpen","server","WebSocket","onopen","onmessage","state","clientMsgs","onChange","send","onKeyPress","console","log","e","this","formatJSON","user","username","role","connect","msg","text","setState","event","newState","push","data","target","value","key","obj","JSON","stringify","style","map","val","index","type","onKeyDown","Component","App","error","onClick","id","display","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.95f0486c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\"\r\n\r\nclass ChatWindow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.chatStyle = {\r\n            height: props.height,\r\n            width: props.height\r\n        }\r\n\r\n        this.onMessage = this.onMessage.bind(this);\r\n        this.onOpen = this.onOpen.bind(this);\r\n        let server = new WebSocket(\"ws://localhost:9876\");\r\n        let clientMsgs = []\r\n        server.onopen = this.onOpen;\r\n        server.onmessage = this.onMessage;\r\n        this.state = {\r\n            server: server,\r\n            clientMsgs: clientMsgs\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.send = this.send.bind(this);\r\n        this.onKeyPress = this.onKeyPress.bind(this);\r\n        console.log(\"Sent connection\");\r\n    }\r\n\r\n    onOpen(e) {\r\n        console.log(\"Connected to server\");\r\n        this.state.server.send(this.formatJSON({\r\n            user: this.props.username,\r\n            role: 1,\r\n            connect: true\r\n        }));\r\n    }\r\n\r\n    send(msg) {\r\n        if (msg !== \"\") {\r\n\r\n\r\n            this.state.server.send(this.formatJSON({\r\n                user: this.props.username,\r\n                role: 1,\r\n                text: msg\r\n            }));\r\n            this.setState({\r\n                msg: \"\"\r\n            })\r\n        }\r\n    }\r\n\r\n    onMessage(event) {\r\n        this.setState((state) => {\r\n            const newState = { ...state };\r\n            newState.clientMsgs.push(event.data);\r\n            return newState;\r\n        });\r\n        console.log(this.state);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({\r\n            msg: e.target.value\r\n        });\r\n    }\r\n\r\n\r\n    onKeyPress(e) {\r\n        if (e.key === \"Enter\") {\r\n            this.send(this.state.msg)\r\n        }\r\n    }\r\n\r\n    formatJSON(obj) {\r\n        return JSON.stringify(obj);\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state)\r\n        return (\r\n            <div style={this.chatStyle}>\r\n                {\r\n\r\n                    this.state !== null ? (\r\n                        this.state.clientMsgs.map((val, index) => {\r\n                            return <div>{val}</div>\r\n                        })\r\n                    ) :\r\n                        (<div></div>)\r\n                }\r\n                <input type=\"text\" onKeyDown={this.onKeyPress} onChange={this.onChange} value={this.state.msg}></input>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ChatWindow;","import React, { Component, Fragment } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport ChatWindow from \"./ChatWindow\";\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      connect: false,\r\n      error: '',\r\n      username: ''\r\n    }\r\n    this.onClick = this.onClick.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n  onClick() {\r\n    if (this.state.username === \"\") {\r\n      this.setState({\r\n        error: \"Username cannot be blank\"\r\n      })\r\n    } else {\r\n      this.setState({\r\n        connect: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({\r\n      username: e.target.value\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {\r\n          this.state.connect ? (\r\n            <ChatWindow height={1000} width={1000} username={this.state.username} />\r\n          ) : (\r\n              <Fragment>\r\n                <p id=\"username-text\" style={{ display: \"inline\" }} >username: </p>\r\n                <input type=\"text\" value={this.state.username} onChange={this.onChange}></input>\r\n                <button id=\"connect-button\" onClick={this.onClick}>Connect</button>\r\n                <h1>{this.state.error}</h1>\r\n              </Fragment>\r\n            )}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}